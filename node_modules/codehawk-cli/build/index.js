#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const codehawk_1 = require("./codehawk");
const cli_util_1 = require("./cli-util");
const yargs_1 = __importDefault(require("yargs"));
// @types/yargs is missing typings for yargs/helpers (see https://github.com/yargs/yargs/issues/1816)
// @ts-expect-error
const helpers_1 = require("yargs/helpers");
const run = (scanDir, createBadge) => {
    if (scanDir && scanDir !== '') {
        const output = (0, codehawk_1.analyzeProject)(`${process.cwd()}/${scanDir}`, true);
        const formattedAsTable = output.resultsList.slice(0, output.options.cliOutputLimit);
        console.log((0, cli_util_1.formatResultsAsTable)(formattedAsTable));
        if (!createBadge) {
            return;
        }
        try {
            console.log('[codehawk-cli] Generating maintainability badge...');
            (0, codehawk_1.generateBadge)(output);
            console.log('[codehawk-cli] Badge was generated');
        }
        catch (e) {
            console.warn('[codehawk-cli] Badge was not generated');
        }
    }
    else {
        console.error('[codehawk-cli] Unable to analyze project, please ensure you provide a directory e.g. "codehawk src"');
    }
};
const rawArgs = (0, helpers_1.hideBin)(process.argv);
const argv = (0, yargs_1.default)(rawArgs)
    .demandCommand(1, 'Please provide a directory argument')
    .describe('no-badge', 'Exclude generated badges')
    .usage('Usage: codehawk [dir] <options>')
    .epilog('For help, file an issue at https://github.com/sgb-io/codehawk-cli/issues')
    .help('help').argv;
run(argv._[0], argv.badge !== false);
