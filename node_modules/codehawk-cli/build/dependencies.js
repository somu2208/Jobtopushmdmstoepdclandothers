"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTimesDependedOn = exports.getProjectDeps = void 0;
const path_1 = __importDefault(require("path"));
const slash_1 = __importDefault(require("slash"));
const utils_1 = require("./utils");
// Gathers all the dependencies as a flat array of strings across all analyzed files
// Note: duplicates are not removed (intentional)
const getProjectDeps = (firstRunResults) => {
    const flatItems = (0, utils_1.flattenEntireTree)(firstRunResults);
    const allAbsoluteDeps = [];
    for (let i = 0; i < flatItems.length; i += 1) {
        const item = flatItems[i];
        if (item.complexityReport) {
            for (let n = 0; n < item.complexityReport.dependencies.length; n += 1) {
                const dep = flatItems[i].complexityReport.dependencies[n];
                const depPath = path_1.default.resolve(item.path, dep.path);
                allAbsoluteDeps.push(depPath);
            }
        }
    }
    return allAbsoluteDeps;
};
exports.getProjectDeps = getProjectDeps;
// Matches a full list of dependencies against a file to count how many times it is depended on
const getTimesDependedOn = (projectDeps, filePath) => {
    const timesDependedOn = projectDeps.filter((d) => {
        const fileNameWithoutExtension = path_1.default
            .basename(filePath)
            .split('.')
            .slice(0, -1)
            .join('.');
        // Windows compatibility (unix-style slashes, plus remove the root drive)
        // eslint-disable-next-line no-useless-escape
        const cleanD = (0, slash_1.default)(d).replace(/\w\:/, '');
        // Match exactly, or fall back to index (index is a reserved case in nodejs)
        // Note: by design, only javascript dependencies are counted (e.g. svg imports will not count as a TDO)
        const fullMatch = cleanD === `${path_1.default.dirname(filePath)}/${fileNameWithoutExtension}`;
        const defaultImportMatch = new RegExp(`${cleanD}/index.(js|ts|tsx|jsx)`, 'i');
        const namedImportMatch = new RegExp(`${cleanD}/`, 'i');
        const indexMatch = filePath.match(defaultImportMatch) || filePath.match(namedImportMatch);
        return fullMatch || indexMatch;
    });
    return timesDependedOn.length;
};
exports.getTimesDependedOn = getTimesDependedOn;
