declare type SupportedStringArrayKeys = 'badgesDirectory' | 'excludeDirectories' | 'excludeExact' | 'excludeFilenames' | 'extensions' | 'skipDirectories';
declare type SupportedBooleanOptions = 'enableFlow';
declare type SupportedNumberOptions = 'minimumThreshold' | 'cliOutputLimit';
export declare type AllOptionKeys = SupportedStringArrayKeys | SupportedBooleanOptions | SupportedNumberOptions;
interface StringArrayOption {
    type: 'stringArray';
    default: string[];
    replaceDefault: boolean;
}
interface BooleanOption {
    type: 'boolean';
    default: boolean;
    replaceDefault: boolean;
}
interface NumberOption {
    type: 'number';
    default: number;
    replaceDefault: boolean;
}
export declare type CodehawkOptions = {
    [key in SupportedStringArrayKeys]?: StringArrayOption;
} & {
    [key in SupportedBooleanOptions]?: BooleanOption;
} & {
    [key in SupportedNumberOptions]?: NumberOption;
};
export declare type AssembledOptions = {
    [key in SupportedStringArrayKeys]?: string[];
} & {
    [key in SupportedBooleanOptions]?: boolean;
} & {
    [key in SupportedNumberOptions]?: number;
};
interface CoverageMeasurement {
    total: number;
    covered: number;
    skipped: number;
    pct: number;
}
declare type SupportedCoverageMeasurements = 'lines' | 'functions' | 'statements' | 'branches';
declare type CoverageMetrics = {
    [key in SupportedCoverageMeasurements]: CoverageMeasurement;
};
export interface CoverageSummary {
    [key: string]: CoverageMetrics;
}
export interface CoverageMapping {
    path: string;
    coverage: CoverageMetrics;
}
interface BaseEntity {
    fullPath: string;
    path: string;
    filename: string;
    shouldAnalyze: boolean;
}
export interface FileWithContents {
    path: string;
    filename: string;
    rawSource: string | undefined;
}
export interface ParsedFile extends BaseEntity {
    type: 'file';
}
export interface ParsedDirectory extends BaseEntity {
    type: 'dir';
    files: ParsedFile[];
}
export declare type ParsedEntity = ParsedFile | ParsedDirectory;
export interface AnalyzedFile extends ParsedFile {
    complexityReport?: CompleteCodehawkComplexityResult;
}
export interface AnalyzedDirectory extends BaseEntity {
    type: 'dir';
    files: AnalyzedFile[];
}
export declare type AnalyzedEntity = AnalyzedFile | AnalyzedDirectory;
export interface FullyAnalyzedFile extends AnalyzedFile {
    timesDependedOn: number;
}
export declare type AnyAnalyzedFile = AnalyzedFile | FullyAnalyzedFile;
export interface FullyAnalyzedDirectory extends BaseEntity {
    type: 'dir';
    files: FullyAnalyzedFile[];
}
export declare type FullyAnalyzedEntity = FullyAnalyzedFile | FullyAnalyzedDirectory;
export interface CodehawkComplexityResult extends ComplexityResult {
    codehawkScore: number;
}
export interface CompleteCodehawkComplexityResult extends CodehawkComplexityResult {
    coverage: string;
}
export interface ResultsSummary {
    average: number;
    median: number;
    worst: number;
}
export {};
