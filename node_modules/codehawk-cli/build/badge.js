"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateBadge = void 0;
const badgen_1 = require("badgen");
const fs_1 = __importDefault(require("fs"));
const slash_1 = __importDefault(require("slash"));
const getBadgeColor = (percent) => {
    let color = 'e05d44'; // 'red';
    if (percent > 15)
        color = 'fe7d37'; // 'orange';
    if (percent > 30)
        color = 'dfb317'; // 'yellow';
    if (percent > 40)
        color = 'a4a61d'; // 'yellowgreen';
    if (percent > 55)
        color = '97ca00'; // 'green';
    if (percent > 65)
        color = '4c1'; // 'brightgreen';
    return color;
};
const generateBadge = (results) => {
    const { average, worst } = results.summary;
    const { badgesDirectory } = results.options;
    const badgesPath = badgesDirectory[0] || ''; // Fall back to root
    const actualPath = (0, slash_1.default)(process.cwd()) + badgesPath;
    if (badgesPath !== '' && !fs_1.default.existsSync(actualPath)) {
        // Fire a specific error message, but also let the upstream generic handling kick in
        const err = `[codehawk-cli] The directory "${badgesPath}" does not exist, please create it in order to generate badges.`;
        console.error(err);
        throw new Error(err);
    }
    try {
        fs_1.default.writeFileSync(`${actualPath}/avg-maintainability.svg`, (0, badgen_1.badgen)({
            label: 'maintainability (avg)',
            status: `${average.toFixed(2)}`,
            color: getBadgeColor(average),
        }), 'utf8');
    }
    catch (error) {
        console.error(error);
    }
    try {
        fs_1.default.writeFileSync(`${actualPath}/worst-maintainability.svg`, (0, badgen_1.badgen)({
            label: 'maintainability (worst)',
            status: `${worst.toFixed(2)}`,
            color: getBadgeColor(worst),
        }), 'utf8');
    }
    catch (error) {
        console.error(error);
    }
};
exports.generateBadge = generateBadge;
