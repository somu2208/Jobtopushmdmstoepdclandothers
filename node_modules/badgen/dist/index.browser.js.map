{
  "version": 3,
  "sources": ["../src/calc-text-width.ts", "../src/color-presets.ts", "../src/index.ts"],
  "sourcesContent": ["// import widthsVerdana110 from './widths-verdana-110.json'\n// @ts-ignore\nconst widthsVerdana110 = require('./widths-verdana-110.json')\n\nconst calcWidth = (charWidthTable) => {\n  const fallbackWidth = charWidthTable[64] // Width as \"@\" for overflows\n\n  return ([...text]) => {\n    let total = 0\n    let charWidth = 0\n    let i = text.length\n    while (i--) {\n      charWidth = charWidthTable[text[i].charCodeAt()]\n      total += charWidth === undefined ? fallbackWidth : charWidth\n    }\n    return total\n  }\n}\n\nexport const Verdana110 = calcWidth(widthsVerdana110)\n", "export default {\n  green: '3C1',\n  blue: '08C',\n  red: 'E43',\n  yellow: 'DB1',\n  orange: 'F73',\n  purple: '94E',\n  pink: 'E5B',\n  grey: '999',\n  gray: '999',\n  cyan: '1BC',\n  black: '2A2A2A'\n}\n", "export { Verdana110 as calcWidth } from './calc-text-width'\nimport { Verdana110 as calcWidth } from './calc-text-width'\nimport colorPresets from './color-presets'\n\ntype StyleOption = 'flat' | 'classic'\n\ninterface BadgenOptions {\n  status: string;\n  subject?: string;\n  color?: string;\n  label?: string;\n  labelColor?: string\n  style?: StyleOption;\n  icon?: string;\n  iconWidth?: number;\n  scale?: number\n}\n\nexport function badgen ({\n  label,\n  subject,\n  status,\n  color = 'blue',\n  style,\n  icon,\n  iconWidth = 13,\n  labelColor = '555',\n  scale = 1\n}: BadgenOptions) {\n  typeAssert(typeof status === 'string', '<status> must be string')\n\n  label = label === undefined ? subject : label // subject is deprecated\n  if (!label && !icon) {\n    return bare({ status, color, style, scale })\n  }\n\n  color = colorPresets[color] || color\n  labelColor = colorPresets[labelColor] || labelColor\n  iconWidth = iconWidth * 10\n\n  const iconSpanWidth = icon ? (label.length ? iconWidth + 30 : iconWidth - 18) : 0\n  const sbTextStart = icon ? (iconSpanWidth + 50) : 50\n  const sbTextWidth = calcWidth(label)\n  const stTextWidth = calcWidth(status)\n  const sbRectWidth = sbTextWidth + 100 + iconSpanWidth\n  const stRectWidth = stTextWidth + 100\n  const width = sbRectWidth + stRectWidth\n  const xlink = icon ? ' xmlns:xlink=\"http://www.w3.org/1999/xlink\"' : ''\n\n  label = sanitize(label)\n  status = sanitize(status)\n  const accessibleText = createAccessibleText({label, status})\n\n  if (style === 'flat') {\n    return `<svg width=\"${scale * width / 10}\" height=\"${scale * 20}\" viewBox=\"0 0 ${width} 200\" xmlns=\"http://www.w3.org/2000/svg\"${xlink} role=\"img\" aria-label=\"${accessibleText}\">\n  <title>${accessibleText}</title>\n  <g>\n    <rect fill=\"#${labelColor}\" width=\"${sbRectWidth}\" height=\"200\"/>\n    <rect fill=\"#${color}\" x=\"${sbRectWidth}\" width=\"${stRectWidth}\" height=\"200\"/>\n  </g>\n  <g aria-hidden=\"true\" fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\n    <text x=\"${sbTextStart + 10}\" y=\"148\" textLength=\"${sbTextWidth}\" fill=\"#000\" opacity=\"0.1\">${label}</text>\n    <text x=\"${sbTextStart}\" y=\"138\" textLength=\"${sbTextWidth}\">${label}</text>\n    <text x=\"${sbRectWidth + 55}\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.1\">${status}</text>\n    <text x=\"${sbRectWidth + 45}\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\n  </g>\n  ${icon ? `<image x=\"40\" y=\"35\" width=\"${iconWidth}\" height=\"132\" xlink:href=\"${icon}\"/>` : ''}\n</svg>`\n  }\n\n  return `<svg width=\"${scale * width / 10}\" height=\"${scale * 20}\" viewBox=\"0 0 ${width} 200\" xmlns=\"http://www.w3.org/2000/svg\"${xlink} role=\"img\" aria-label=\"${accessibleText}\">\n  <title>${accessibleText}</title>\n  <linearGradient id=\"a\" x2=\"0\" y2=\"100%\">\n    <stop offset=\"0\" stop-opacity=\".1\" stop-color=\"#EEE\"/>\n    <stop offset=\"1\" stop-opacity=\".1\"/>\n  </linearGradient>\n  <mask id=\"m\"><rect width=\"${width}\" height=\"200\" rx=\"30\" fill=\"#FFF\"/></mask>\n  <g mask=\"url(#m)\">\n    <rect width=\"${sbRectWidth}\" height=\"200\" fill=\"#${labelColor}\"/>\n    <rect width=\"${stRectWidth}\" height=\"200\" fill=\"#${color}\" x=\"${sbRectWidth}\"/>\n    <rect width=\"${width}\" height=\"200\" fill=\"url(#a)\"/>\n  </g>\n  <g aria-hidden=\"true\" fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\n    <text x=\"${sbTextStart + 10}\" y=\"148\" textLength=\"${sbTextWidth}\" fill=\"#000\" opacity=\"0.25\">${label}</text>\n    <text x=\"${sbTextStart}\" y=\"138\" textLength=\"${sbTextWidth}\">${label}</text>\n    <text x=\"${sbRectWidth + 55}\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.25\">${status}</text>\n    <text x=\"${sbRectWidth + 45}\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\n  </g>\n  ${icon ? `<image x=\"40\" y=\"35\" width=\"${iconWidth}\" height=\"130\" xlink:href=\"${icon}\"/>` : ''}\n</svg>`\n}\n\nfunction bare ({ status, color, style, scale }) {\n  typeAssert(typeof status === 'string', '<status> must be string')\n  color = colorPresets[color] || color || colorPresets.blue\n\n  const stTextWidth = calcWidth(status)\n  const stRectWidth = stTextWidth + 115\n\n  status = sanitize(status)\n\n  if (style === 'flat') {\n    return `<svg width=\"${scale * stRectWidth / 10}\" height=\"${scale * 20}\" viewBox=\"0 0 ${stRectWidth} 200\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" aria-label=\"${status}\">\n  <title>${status}</title>\n  <g>\n    <rect fill=\"#${color}\" x=\"0\" width=\"${stRectWidth}\" height=\"200\"/>\n  </g>\n  <g aria-hidden=\"true\" fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\n    <text x=\"65\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.1\">${status}</text>\n    <text x=\"55\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\n  </g>\n</svg>`\n  }\n\n  return `<svg width=\"${scale * stRectWidth / 10}\" height=\"${scale * 20}\" viewBox=\"0 0 ${stRectWidth} 200\" xmlns=\"http://www.w3.org/2000/svg\" role=\"img\" aria-label=\"${status}\">\n  <title>${status}</title>\n  <linearGradient id=\"a\" x2=\"0\" y2=\"100%\">\n    <stop offset=\"0\" stop-opacity=\".1\" stop-color=\"#EEE\"/>\n    <stop offset=\"1\" stop-opacity=\".1\"/>\n  </linearGradient>\n  <mask id=\"m\"><rect width=\"${stRectWidth}\" height=\"200\" rx=\"30\" fill=\"#FFF\"/></mask>\n  <g mask=\"url(#m)\">\n    <rect width=\"${stRectWidth}\" height=\"200\" fill=\"#${color}\" x=\"0\"/>\n    <rect width=\"${stRectWidth}\" height=\"200\" fill=\"url(#a)\"/>\n  </g>\n  <g aria-hidden=\"true\" fill=\"#fff\" text-anchor=\"start\" font-family=\"Verdana,DejaVu Sans,sans-serif\" font-size=\"110\">\n    <text x=\"65\" y=\"148\" textLength=\"${stTextWidth}\" fill=\"#000\" opacity=\"0.25\">${status}</text>\n    <text x=\"55\" y=\"138\" textLength=\"${stTextWidth}\">${status}</text>\n  </g>\n</svg>`\n}\n\nfunction sanitize (str: string): string {\n  return str\n    .replace(/\\u0026/g, '&amp;')\n    .replace(/\\u003C/g, '&lt;')\n    .replace(/\\u003E/g, '&gt;')\n    .replace(/\\u0022/g, '&quot;')\n    .replace(/\\u0027/g, '&apos;')\n}\n\ninterface AccessibleTextProps {\n  status: string;\n  label?: string;\n}\n\nfunction createAccessibleText({label, status}: AccessibleTextProps): string {\n  const labelPrefix = label ? `${label}: ` : '';\n  return labelPrefix + status;\n}\n\nfunction typeAssert (assertion: boolean, message: string): void {\n  if (!assertion) throw new TypeError(message)\n}\n\ndeclare global {\n  interface Window {\n    badgen: typeof badgen;\n  }\n}\n\nif (typeof window === 'object') {\n  window.badgen = badgen\n}\n"],
  "mappings": "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",
  "names": []
}
